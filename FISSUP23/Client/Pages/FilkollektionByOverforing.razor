@page "/overforingar/{OverforingId:int}/filkollektioner"
@using FISSUP23.Database.Models
@using System.Text.Json
@using FISSUP23.Client.ViewModels
@inject HttpClient http
@inject NavigationManager navMan

<h3>Filkollektioner för "@filkollektionForOverName"</h3>

<button type="button" class="btn btn-secondary" @onclick="RedirectAddFilkollektion"> Lägg till filkollektion</button>

@if (FilkollektionVMs != null)
{
    <table class="table">
        <thead>
        <tr>
            <th>
                <span>Markera</span>
                <span>
                    <input type="checkbox" @onchange="MarkeraAlla"/>
                </span>
            </th>
            <th>Namn</th>
            <th>Ändelse</th>
            <th>MatchMönster</th>
            <th>Beskrivning</th>
            <th>FolderRoot</th>
            <th>FolderArkiv</th>
            <th>FolderNyFil</th>
            <th>FolderFelaktigaFil</th>
            <th>Antal Filer</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var filkol in FilkollektionVMs)
        {
            <tr>
                <td>
                    <input type="checkbox" @bind="filkol.isChecked" @onclick="() => OverCheck(filkol)"/>
                </td>
                <td>
                    @filkol.Namn
                </td>
                <td>
                    @filkol.Andelse
                </td>
                <td>
                    @filkol.MatchMonster
                </td>
                <td>
                    @filkol.Beskrivning
                </td>
                <td>
                    @filkol.FolderRoot
                </td>
                <td>
                    @filkol.FolderArkiv
                </td>
                <td>
                    @filkol.FolderNyFil
                </td>
                <td>
                    @filkol.FolderFelaktigFil
                </td>
                <td>
                    <a href=@($"./overforingar/{OverforingId}/filkollektioner/{filkol.Id}/filer")>@filkol.AntalFiler.ToString()</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
    @if (MarkeradeFilkollektioner.Count != 0)
    {
        <br/>
        <br/>
        <br/>


        <h2 style="color:black">
            <strong> Se detaljer, uppdatera eller radera</strong>
        </h2>
        <div>
            @if (MarkeradeFilkollektioner.Count == 1)
            {
                <button type="button" class="btn btn-secondary" @onclick="RedirectUpdate"> Uppdatera</button>
            }
            <button type="button" class="btn btn-secondary" style="margin-left: 10px"@onclick="OpenDeleteDialog"> Ta bort </button>
        </div>


        <br/>
        @foreach (var filkollek in MarkeradeFilkollektioner)
        {
            <dl class="row">
                <dt class="col-sm-3">Namn:</dt>
                <dd class="col-sm-9" style=" color: black"> @filkollek.Namn</dd>

                <dt class="col-sm-3">Ändelse:</dt>
                <dd class="col-sm-9" style=" color: black"> @filkollek.Andelse</dd>

                <dt class="col-sm-3">Match mönster:</dt>
                <dd class="col-sm-9">
                    <p style=" color: black">@filkollek.MatchMonster</p>
                </dd>
                <dt class="col-sm-3">Beskrivning:</dt>
                <dd class="col-sm-9" style=" color: black"> @filkollek.Beskrivning</dd>

                <dt class="col-sm-3">Folder root:</dt>
                <dd class="col-sm-9" style=" color: black"> @filkollek.FolderRoot</dd>

                <dt class="col-sm-3">Folder arkiv:</dt>
                <dd class="col-sm-9" style=" color: black"> @filkollek.FolderArkiv</dd>

                <dt class="col-sm-3">Folder ny fil:</dt>
                <dd class="col-sm-9" style=" color: black"> @filkollek.FolderNyFil</dd>

                <dt class="col-sm-3">Folder felaktiga fil:</dt>
                <dd class="col-sm-9" style=" color: black"> @filkollek.FolderFelaktigFil</dd>

                <dt class="col-sm-3">Antal filer:</dt>
                <dd class="col-sm-9" style=" color: black"> @filkollek.AntalFiler</dd>

            </dl>

            <br/>
        }
    }
}
else
{
    <p> Laddar ...</p>
}

@if (DeleteDialogOpen)
{
    <Modaldialog Title="OBS!"
                 text=" Genom att ta bort den entiteten kommer andra relaterade entiteter att tas bort.
                        Är du säker?" onClose="@OnDeleteDialogClose">
    </Modaldialog>
}
@code {

    [Parameter]
    public int OverforingId { get; set; }
    
    public string filkollektionForOverName { get; set; }

    private bool IsCheckedTotal { get; set; }
    private List<FilKollektion> Filkollektions { get; set; }
    private List<ViewModels.FilkollektionViewModel> FilkollektionVMs { get; set; }
    private List<ViewModels.FilkollektionViewModel> MarkeradeFilkollektioner { get; set; }
    
    public bool DeleteDialogOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var overforing = await http.GetFromJsonAsync<Database.Models.Overforing>($"./api/Overforings/{OverforingId}");
        Filkollektions = overforing.FilKollektions.ToList();
        filkollektionForOverName = overforing.Namn;
        FilkollektionVMs = new List<ViewModels.FilkollektionViewModel>();
        MarkeradeFilkollektioner = new List<ViewModels.FilkollektionViewModel>();

        foreach (var filkollektion in Filkollektions)
        {
            var FilkollektionsVMs = new ViewModels.FilkollektionViewModel
            {
                isChecked = false,
                Id = filkollektion.Id,
                Namn = filkollektion.Namn,
                Andelse = filkollektion.Andelse,
                MatchMonster = filkollektion.MatchMonster,
                Beskrivning = filkollektion.Beskrivning,
                FolderRoot = filkollektion.FolderRoot,
                FolderArkiv = filkollektion.FolderArkiv,
                FolderNyFil = filkollektion.FolderNyFil,
                FolderFelaktigFil = filkollektion.FolderFelaktigFil,
                AntalFiler = filkollektion.Fils.Count
            };

            FilkollektionVMs.Add(FilkollektionsVMs);
        }

        StateHasChanged();
    }

    private void OverCheck(ViewModels.FilkollektionViewModel filkollektion)
    {
        filkollektion.isChecked = !filkollektion.isChecked;

        if (filkollektion.isChecked)
        {
            MarkeradeFilkollektioner.Add(filkollektion);
        }
        else
        {
            MarkeradeFilkollektioner.Remove(filkollektion);
        }
    }
    
    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            Delete();
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog()
    {
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    private void MarkeraAlla()
    {
        IsCheckedTotal = !IsCheckedTotal;

        foreach (var filkollektion in FilkollektionVMs)
        {
            filkollektion.isChecked = IsCheckedTotal;
        }

        MarkeradeFilkollektioner = new List<ViewModels.FilkollektionViewModel>();
        if (IsCheckedTotal)
        {
            MarkeradeFilkollektioner.AddRange(FilkollektionVMs);
        }
    }
    private async void Delete()
    {
        var toDelete = MarkeradeFilkollektioner.Select(m => m.Id.ToString());

        var request = new HttpRequestMessage
        {
            RequestUri = new Uri("./api/FilKollektions", UriKind.RelativeOrAbsolute),
            Method = HttpMethod.Delete,
            Content = new StringContent(JsonSerializer.Serialize(toDelete), System.Text.Encoding.UTF8, "application/json")
        };

        var resp = await http.SendAsync(request);

        if (resp.StatusCode == System.Net.HttpStatusCode.OK)
        {
            FilkollektionVMs = FilkollektionVMs.FindAll(o => !toDelete.Contains(o.Id.ToString())).ToList();
            MarkeradeFilkollektioner = new List<FilkollektionViewModel>();
            StateHasChanged();
        }
    }

    private void RedirectAddFilkollektion()
    {
        navMan.NavigateTo($"./overforingar/{OverforingId}/filkollektioner/add", true);
    }
    
    private void RedirectUpdate()
    {
        var mo = MarkeradeFilkollektioner.FirstOrDefault();
        navMan.NavigateTo($"./overforingar/{OverforingId}/filkollektioner/{mo.Id.ToString()}/update", true);
    }

}